import asyncio
import logging
from PyQt5.QtCore import QThread, pyqtSignal
from bleak import BleakScanner, BleakClient


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.FileHandler("trainer_app.log", encoding="utf-8")
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# UUID —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—É–ª—å—Å–æ–º–µ—Ç—Ä–∞ (Heart Rate Service)
HRS_SERVICE_UUID = "0000180d-0000-1000-8000-00805f9b34fb"
HRS_CHARACTERISTIC_UUID = "00002a37-0000-1000-8000-00805f9b34fb"

# UUID —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –∫–∞–¥–µ–Ω—Å–∞
FTMS_SERVICE_UUID = "00001826-0000-1000-8000-00805f9b34fb"
POWER_CHARACTERISTIC_UUID = "00002a63-0000-1000-8000-00805f9b34fb"

class BluetoothScannerThread(QThread):
    """
    –ü–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        device_type (str): –¢–∏–ø –∏—Å–∫–æ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø—É–ª—å—Å–æ–º–µ—Ç—Ä –∏–ª–∏ –≤–µ–ª–æ—Å—Ç–∞–Ω–æ–∫).
    
    –°–∏–≥–Ω–∞–ª—ã:
        scan_finished (list): –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ [(–∏–º—è, MAC), ...].
    """
    scan_finished = pyqtSignal(list)  # [(–∏–º—è, MAC), ...]
    scanning = False  # –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    def __init__(self, device_type):
        super().__init__()
        self.device_type = device_type
        self.running = True

    async def scan_devices(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        while self.running:
            if not self.scanning:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await asyncio.sleep(1)
                continue

            logger.info(f"[üîç] –ü–æ–∏—Å–∫ {self.device_type}...")
            devices = await BleakScanner.discover()
            found_devices = [(d.name, d.address) for d in devices if d.name]

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø—É
            filtered_devices = []
            for name, mac in found_devices:
                if self.device_type == "–ø—É–ª—å—Å–æ–º–µ—Ç—Ä" and "Polar" in name:
                    filtered_devices.append((name, mac))
                elif self.device_type == "–≤–µ–ª–æ—Å—Ç–∞–Ω–æ–∫" and "Think" in name:
                    filtered_devices.append((name, mac))

            if filtered_devices:
                self.scan_finished.emit(filtered_devices)  # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

            await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º

    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        asyncio.run(self.scan_devices())

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.running = False
        logger.info(f"[‚èπ] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ {self.device_type}")

    def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.scanning = False
        logger.info(f"[‚è∏] –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ {self.device_type}")

    def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.scanning = True
        logger.info(f"[‚ñ∂] –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ {self.device_type}")


class BluetoothConnectThread(QThread):
    """
    –ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    –°–∏–≥–Ω–∞–ª—ã:
        connection_result (str, bool): MAC-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        data_received (int): –ó–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞.
    """
    connection_result = pyqtSignal(str, str, bool)
    data_received = pyqtSignal(int)

    def __init__(self, name, mac, device_type):
        super().__init__()
        self.name = name
        self.mac = mac
        self.device_type = device_type
        self.connected = False
        self.running = True

    async def connect_and_listen(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        while self.running:
            try:
                logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.name}:{self.mac}...")
                async with BleakClient(self.mac) as client:
                    self.connected = await client.is_connected()

                    if self.connected:
                        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.")
                        self.connection_result.emit(self.name, self.mac, True)

                        # –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        if self.device_type == '–ø—É–ª—å—Å–æ–º–µ—Ç—Ä':
                            await client.start_notify(HRS_CHARACTERISTIC_UUID, self.handle_heart_rate)
                        else:
                            await client.start_notify(POWER_CHARACTERISTIC_UUID, self.handle_power_data)
                        while self.connected:
                            await asyncio.sleep(1)
                    else:
                        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")
                        self.connection_result.emit(self.name, self.mac, False)
            except Exception as e:
                logger.error(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                self.connection_result.emit(self.name, self.mac, False)
        
    def handle_power_data(self, _, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–ª–æ—Å—Ç–∞–Ω–∫–∞."""
        if len(data) < 6:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á—Ç–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –∫–∞–¥–µ–Ω—Å–∞.")
            return

        # –í–∞—Ç—Ç—ã (–º–æ—â–Ω–æ—Å—Ç—å) –≤–æ –≤—Ç–æ—Ä–æ–º –∏ —Ç—Ä–µ—Ç—å–µ–º –±–∞–π—Ç–∞—Ö (Little Endian)
        power = int.from_bytes(data[2:4], byteorder="little", signed=True)

        # –ö–∞–¥–µ–Ω—Å –≤ —á–µ—Ç–≤–µ—Ä—Ç–æ–º –∏ –ø—è—Ç–æ–º –±–∞–π—Ç–∞—Ö
        cadence = int.from_bytes(data[4:6], byteorder="little", signed=False)

        logger.info(f"‚ö° –ú–æ—â–Ω–æ—Å—Ç—å: {power} –í—Ç  |  üîÑ –ö–∞–¥–µ–Ω—Å: {cadence} –æ–±/–º–∏–Ω")

        self.data_received.emit(power)

    def handle_heart_rate(self, _, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª—å—Å–æ–º–µ—Ç—Ä–∞."""
        heart_rate = data[1]  # –í—Ç–æ—Ä–æ–π –±–∞–π—Ç ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞
        logger.info(f"‚ù§Ô∏è –¢–µ–∫—É—â–∏–π –ø—É–ª—å—Å: {heart_rate} —É–¥/–º–∏–Ω")
        self.data_received.emit(heart_rate)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        asyncio.run(self.connect_and_listen())
    
    def stop(self):
        self.connected = False
        self.running = False
